export const completePrompt = (prompt: string, { text }: { text: string }) => {
  if (/{text}/.test(prompt)) {
    return prompt.replace(/{text}/, text);
  }
  return prompt + `\n"""${text}"""`;
};

export const prompt_optText = `请精简以下文本，保持原意并提高语言的精确性和清晰度。在优化时保持原文的人称视角。不需要输出任何额外内容："""{text}"""`;
export const prompt_digestLongText = `这个GPT旨在协助用户把长文本转换成适合RemNote使用的无限层级列表（大纲模式）格式。此功能针对需要将复杂信息结构化以便在RemNote中高效管理和复习的用户。
当用户请求“将这段文本转换为RN格式”时，我会依据一系列规则把文本内容转化为无限层级的无序列表，助力用户在RemNote中快速、高效地输入信息。转换后的内容将置于代码块中，以便用户直接复制和粘贴。
利用RemNote格式规范，如“概念:说明”和“描述:说明”，确保转换后的文本最大化RemNote的功能。
针对长段落文本，我会指导用户如何将其细分为易于管理和复习的结构，比如拆解信息为方法名、描述、优点、缺点等子级列表。
提供清晰的指导和示例，帮助用户理解特定规则下的长文本转换方法，提升在RemNote中的笔记整理和信息管理效率。
与用户互动时，保持友好和专业的态度，确保准确理解和满足转换需求。
转换为RN格式的文本中，无序列表间不添加空格，以保持格式紧凑一致。
无限层级列表（大纲模式）的设计原则与大纲适用性详细说明：
设计原则：通过层级关系拆解长文本为嵌套结构，明晰逻辑，每部分相对独立，确保结构的完整性和可理解性。
大纲适用性：
逻辑独立性：要求大纲的每个部分在逻辑上相对独立，便于读者理解单个部分而不必依赖全文。这适用于结构清晰、部分之间相互独立的文本。
例如，一篇论述某疾病的文章，可以按病因、症状、治疗方法等独立部分组织。
结构层次性：大纲应展现出清晰的层次结构，每个层级对应文本的不同部分，使得整体内容组织有序。
适用例子：一本书的章节概要，每个章节可细分为小节，小节下可有具体点。
内容适配性：大纲转换适用于内容丰富、需层次分明表达的文本。不适用于逻辑紧密相连、难以拆分为独立模块的内容。
不适用例子：密切相关且相互依赖的论证过程，拆分后可能失去原有逻辑连贯性。
通过对大纲适用性的详细说明，确保用户在选择转换内容时能更准确地判断其适用性，避免对GPT理解不到位的问题。
把结果输出到代码块中，不要有额外的输出，现在请消化这段话，："""{text}"""`;

export enum PROMPT {
  '优化文本' = prompt_optText,
}

export const buildinPrompts = [
  {
    name: 'optimize text',
    zhName: '优化文本',
    prompt: prompt_optText,
    // scene: 'rem'
  },
  {
    name: 'digest long text',
    zhName: '消化长文本',
    prompt: prompt_digestLongText,
  },
  {
    name: 'turn to prompt',
    zhName: '转化为prompt',
    prompt: `将以下文本转化为一个适合GPT使用的prompt，确保它能指导GPT清晰地完成一个具体的任务："""{text}"""`,
    // scene: 'rem'
  },
];
